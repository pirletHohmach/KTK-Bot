import json
import database
import requests
import random
import asyncio
import hashlib


from aiogram import Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types.web_app_info import WebAppInfo
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router

from datetime import datetime, timedelta


with open('config.json', 'r', encoding="utf-8") as config_file:
    config = json.load(config_file)


COLLEGE_GROUPS = sorted(config["COLLEGE_GROUPS"])
BUTTONS_PER_PAGE = 8

TEACHERS = sorted(config["TEACHERS"])
TEACHERS_PER_PAGE = 8

SCHEDULE_API_URL = config["SCHEDULE_API_URL"]
MOODLE_URL = config["MOODLE_URL"]
username_jokes = config["USERNAME_JOKES"]
router = Router()



class GroupChoice(StatesGroup):
    waiting_group = State()

#–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
async def create_group_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    start_index = page * BUTTONS_PER_PAGE
    end_index = start_index + BUTTONS_PER_PAGE

    button_text = f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø, –≤—Å–µ —É–º–µ—Ä–ª–∏ –æ—Ç –Ω–µ–π—Ä–æ—Ç–æ–∫—Å–∏–Ω–∞ :)"

    total_pages = (len(COLLEGE_GROUPS) + BUTTONS_PER_PAGE - 1) // BUTTONS_PER_PAGE

    buttons = []

    current_groups = COLLEGE_GROUPS[start_index:end_index]

    if not current_groups:
        return InlineKeyboardMarkup(
            InlineKeyboardButton=[[InlineKeyboardButton(text=button_text, callback_data="none")]])

    for i in range(0, len(current_groups), 2):
        row = []
        # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
        (row.append
            (InlineKeyboardButton(
            text=current_groups[i],
            callback_data=f"group_{current_groups[i]}")))

        if i + 1 < len(current_groups):
            row.append(
                InlineKeyboardButton(
                    text=current_groups[i + 1],
                    callback_data=f"group_{current_groups[i + 1]}"))
        buttons.append(row)

    nav_buttons = []

    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page == 0:
        if total_pages > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="–î–∞–ª–µ–µ‚û°Ô∏è",
                callback_data=f"page-{page + 1}"))

    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    elif page == total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
            callback_data=f"page-{page - 1}"))

    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    else:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥",
            callback_data=f"page-{page - 1}"))

        nav_buttons.append(InlineKeyboardButton(
            text="–î–∞–ª–µ–µ‚û°Ô∏è",
            callback_data=f"page-{page + 1}"))

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if nav_buttons:
        buttons.append(nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    buttons.append([InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="home")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(lambda c: c.data == "change-group")
async def change_group_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        f"{random.choice(username_jokes)} –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∫–∞–∫ –∏ —Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏:\n",
        reply_markup=await create_group_keyboard()
    )
    await state.set_state(GroupChoice.waiting_group)
    await state.update_data(message_id=callback_query.message.message_id)
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith('page-'))
async def handle_page_change(callback_query: CallbackQuery):
    page = int(callback_query.data.split('-')[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    await callback_query.message.edit_text(
        f"{random.choice(username_jokes)} –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∫–∞–∫ –∏ —Ç—ã:\n",
        reply_markup=await create_group_keyboard(page=page)
    )
    await callback_query.answer()


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ callback_data –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
@router.callback_query(lambda c: c.data.startswith('group_'))
async def select_group(callback_query: CallbackQuery, state: FSMContext):
    group = callback_query.data.split('_')[1]
    user_id = callback_query.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    database.update_user_group(user_id, group)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.edit_text(
        f"–ì—Ä—É–ø–ø–∞ \"{group}\" —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:",
        reply_markup=await create_help_keyboard()
    )
    await state.clear()
    await callback_query.answer()


@router.message(GroupChoice.waiting_group)
async def process_text_group(message: Message, state: FSMContext):
    user_id = message.from_user.id
    group = message.text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    data = await state.get_data()
    if message_id := data.get('message_id'):
        try:
            await message.bot.delete_message(message.chat.id, message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≥—Ä—É–ø–ø–∞ –≤–∞–ª–∏–¥–Ω–æ–π
    if group not in COLLEGE_GROUPS:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏\n\n",
            reply_markup=await create_group_keyboard()
        )
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ—â–µ –æ–¥–∏–Ω —à–∞–Ω—Å

    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –≤–∞–ª–∏–¥–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    database.update_user_group(user_id, group)

    await message.answer(f"–ì—Ä—É–ø–ø–∞ \"{group}\" —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥
async def create_help_keyboard() -> InlineKeyboardMarkup:
    command_buttons = [
        [InlineKeyboardButton(text="–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—Éüë•", callback_data="change-group")],
        [
            InlineKeyboardButton(text="üìö–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="schedule-today"),
            InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞üìö", callback_data="schedule-tomorrow")
        ],
        [InlineKeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏üë®‚Äçüè´", callback_data="teachers")],
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å Moodle", web_app=WebAppInfo(url=MOODLE_URL) )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=command_buttons)


def get_share_keyboard(schedule_text: str):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
            switch_inline_query=schedule_text
        )
    ]])


@router.callback_query(lambda c: c.data in ["schedule-today", "schedule-tomorrow", "change-group"])
async def handle_schedule_and_group(callback_query: CallbackQuery, state: FSMContext):
    data = callback_query.data
    user_id = callback_query.from_user.id

    if data in ["schedule-today", "schedule-tomorrow"]:
        group_name = database.get_user_group(user_id)
        today = datetime.now()
        date_to_check = today if data == "schedule-today" else today + timedelta(days=1)
        date_str = date_to_check.strftime('%Y-%m-%d')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ
        if today.weekday() == 6 and data == "schedule-today":  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            await callback_query.message.edit_text(
                "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π",
                reply_markup=get_share_keyboard("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π")
            )
            await callback_query.answer()
            return
        elif today.weekday() == 7 and data == "schedule-tomorrow":  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            await callback_query.message.edit_text(
                "–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π",
                reply_markup=get_share_keyboard("–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π")
            )
            await callback_query.answer()
            return

        if not group_name:
            await callback_query.message.answer("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ –≥—Ä—É–ø–ø—É")
            await callback_query.answer()
            return

        await callback_query.message.edit_text("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        response = requests.get(f"{SCHEDULE_API_URL}?date={date_str}&type=None")
        data_response = response.json()

        if data_response.get("result"):
            schedule_list = data_response.get("obj", {}).get("schedule_list_data", [])
            start_times = data_response.get("obj", {}).get("start_at", [])
            end_times = data_response.get("obj", {}).get("end_at", [])

            filtered_schedule = [item for item in schedule_list if item.get("collective") == group_name]

            if filtered_schedule:
                schedule_message = []
                current_number = 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–∞—Ä

                for i, item in enumerate(filtered_schedule):
                    start_time_str = start_times[item['class_index'] - 1]
                    end_time_str = end_times[item['class_index'] - 1]

                    start_time = datetime.strptime(start_time_str, '%H:%M:%S').strftime('%H:%M')
                    end_time = datetime.strptime(end_time_str, '%H:%M:%S').strftime('%H:%M')

                    subject = item.get('subject', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').replace("/", "").replace("moodle/", "moodle").strip()

                    if i > 0:
                        prev_end_time_str = end_times[filtered_schedule[i - 1]['class_index'] - 1]
                        prev_end_time = datetime.strptime(prev_end_time_str, '%H:%M:%S')
                        current_start_time = datetime.strptime(start_time_str, '%H:%M:%S')

                        if current_start_time > prev_end_time:
                            current_number += 1

                    schedule_message.append(
                        f"{current_number}. [{start_time} - {end_time}] ‚Ä¢ "
                        f"{subject} ‚Ä¢ "
                        f"{item.get('teacher', '–ù–µ —É–∫–∞–∑–∞–Ω')} ‚Ä¢ "
                        f"–ê—É–¥–∏—Ç–æ—Ä–∏—è: {item.get('classroom', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
                    )

                final_message = (
                        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {'—Å–µ–≥–æ–¥–Ω—è' if data == 'schedule-today' else '–∑–∞–≤—Ç—Ä–∞'} "
                        f"–¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:\n\n" + "\n\n".join(schedule_message)
                )

                await callback_query.message.edit_text(
                    final_message,
                    reply_markup=get_share_keyboard(final_message)
                )
            else:
                no_schedule_message = (
                    f"–ù–∞ {'—Å–µ–≥–æ–¥–Ω—è' if data == 'schedule-today' else '–∑–∞–≤—Ç—Ä–∞'} "
                    f"–Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}"
                )
                await callback_query.message.edit_text(
                    no_schedule_message,
                    reply_markup=get_share_keyboard(no_schedule_message)
                )
        else:
            error_message = (
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ "
                f"{'—Å–µ–≥–æ–¥–Ω—è' if data == 'schedule-today' else '–∑–∞–≤—Ç—Ä–∞'}"
            )
            await callback_query.message.edit_text(
                error_message,
                reply_markup=get_share_keyboard(error_message)
            )
        await callback_query.answer()

    elif data == "change-group":
        await callback_query.message.edit_text(
            f"{random.choice(username_jokes)} –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Å —Ç–∞–∫–∏–º–∏ –∂–µ –∫–∞–∫ –∏ —Ç—ã:\n",
            reply_markup=await create_group_keyboard()
        )
        await state.set_state(GroupChoice.waiting_group)
        await state.update_data(message_id=callback_query.message.message_id)
        await callback_query.answer()


async def create_teachers_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    start_index = page * TEACHERS_PER_PAGE
    end_index = start_index + TEACHERS_PER_PAGE
    total_pages = (len(TEACHERS) + TEACHERS_PER_PAGE - 1) // TEACHERS_PER_PAGE

    buttons = []
    current_teachers = TEACHERS[start_index:end_index]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (2 –≤ —Ä—è–¥)
    for i in range(0, len(current_teachers), 2):
        row = []
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
        row.append(InlineKeyboardButton(
            text=f"{current_teachers[i]}",
            callback_data=f"teacher_{current_teachers[i]}"
        ))

        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–æ–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ —Ä—è–¥—É
        if i + 1 < len(current_teachers):
            row.append(InlineKeyboardButton(
                text=f"{current_teachers[i + 1]}",
                callback_data=f"teacher_{current_teachers[i + 1]}"
            ))
        buttons.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è–ù–∞–∑–∞–¥", callback_data=f"teachers_page-{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ‚û°Ô∏è", callback_data=f"teachers_page-{page + 1}"))
    if nav_buttons:
        buttons.append(nav_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞ –≥–ª–∞–≤–Ω—É—é"
    buttons.append([InlineKeyboardButton(text="–ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="home")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(lambda c: c.data == "home")
async def handle_home_button(callback_query: CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ–Ω—é
    await callback_query.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:",
        reply_markup=await create_help_keyboard()
    )
    await callback_query.answer()

async def create_teacher_actions_keyboard(teacher_name: str) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üö™–£–∑–Ω–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã —Å–µ–≥–æ–¥–Ω—è", callback_data=f"classrooms_today_{teacher_name}"),
            InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç—ã –∑–∞–≤—Ç—Ä–∞üö™", callback_data=f"classrooms_tomorrow_{teacher_name}")
        ],
        [
            InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥‚≠ê", callback_data=f"rate_{teacher_name}")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º", callback_data="back_to_teachers")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)



async def create_rating_keyboard(teacher_name: str) -> InlineKeyboardMarkup:
    buttons = []
    # –°–æ–∑–¥–∞–µ–º —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ —Å –æ—Ü–µ–Ω–∫–∞–º–∏ –æ—Ç 1 –¥–æ 5
    rating_buttons = [InlineKeyboardButton(
        text=str(i),
        callback_data=f"setrate_{teacher_name}_{i}"
    ) for i in range(1, 6)]
    buttons.append(rating_buttons)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"teacher_{teacher_name}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(lambda c: c.data == "teachers")
async def show_teachers(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=await create_teachers_keyboard()
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("teachers_page-"))
async def handle_teachers_page(callback_query: CallbackQuery):
    page = int(callback_query.data.split('-')[1])
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=await create_teachers_keyboard(page)
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("teacher_"))
async def handle_teacher_selection(callback_query: CallbackQuery):
    teacher_name = callback_query.data.split('_', 1)[1]
    rating_info = database.get_teacher_rating(teacher_name)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–µ–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
    if rating_info:
        average_rating = rating_info['average_rating']
        if average_rating == int(average_rating):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
            rating_text = f"\n–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {int(average_rating)}/5"
        else:
            rating_text = f"\n–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {average_rating:.1f}/5"  # –§–æ—Ä–º–∞—Ç —Å –æ–¥–Ω–æ–π –¥–µ—Å—è—Ç–∏—á–Ω–æ–π
    else:
        rating_text = ""

    await callback_query.message.edit_text(
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}{rating_text}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await create_teacher_actions_keyboard(teacher_name)
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("classrooms_today_"))
async def show_teacher_classrooms_today(callback_query: CallbackQuery):
    teacher_name = callback_query.data.split('_', 2)[2]

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().strftime('%Y-%m-%d')
    response = requests.get(f"{SCHEDULE_API_URL}?date={today}&type=None")
    data = response.json()

    classroom_times = []
    if data.get("result"):
        schedule_list = data.get("obj", {}).get("schedule_list_data", [])
        start_times = data.get("obj", {}).get("start_at", [])
        end_times = data.get("obj", {}).get("end_at", [])

        for item in schedule_list:
            if item.get("teacher") == teacher_name:
                classroom = item.get("classroom", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                start_time = datetime.strptime(start_times[item['class_index'] - 1], '%H:%M:%S').strftime('%H:%M')
                end_time = datetime.strptime(end_times[item['class_index'] - 1], '%H:%M:%S').strftime('%H:%M')
                classroom_times.append({
                    'classroom': classroom,
                    'time': f"<b>{start_time} - {end_time}</b>"
                })

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è (—É–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
    classroom_times.sort(key=lambda x: x['time'].replace('<b>', '').replace('</b>', ''))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    classrooms_text = "\n".join(
        f"{i}. {item['classroom']} | {item['time']}"
        for i, item in enumerate(classroom_times, 1)
    ) if classroom_times else "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"

    await callback_query.message.edit_text(
        f"–ö–∞–±–∏–Ω–µ—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n{classrooms_text}",
        reply_markup=await create_teacher_actions_keyboard(teacher_name),
        parse_mode='HTML'
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("classrooms_tomorrow_"))
async def show_teacher_classrooms_tomorrow(callback_query: CallbackQuery):
    teacher_name = callback_query.data.split('_', 2)[2]

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d')
    response = requests.get(f"{SCHEDULE_API_URL}?date={tomorrow}&type=None")
    data = response.json()

    classroom_times = []
    if data.get("result"):
        schedule_list = data.get("obj", {}).get("schedule_list_data", [])
        start_times = data.get("obj", {}).get("start_at", [])
        end_times = data.get("obj", {}).get("end_at", [])

        for item in schedule_list:
            if item.get("teacher") == teacher_name:
                classroom = item.get("classroom", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                start_time = datetime.strptime(start_times[item['class_index'] - 1], '%H:%M:%S').strftime('%H:%M')
                end_time = datetime.strptime(end_times[item['class_index'] - 1], '%H:%M:%S').strftime('%H:%M')
                classroom_times.append({
                    'classroom': classroom,
                    'time': f"<b>{start_time} - {end_time}</b>"
                })

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è (—É–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
    classroom_times.sort(key=lambda x: x['time'].replace('<b>', '').replace('</b>', ''))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    classrooms_text = "\n".join(
        f"{i}. {item['classroom']} | {item['time']}"
        for i, item in enumerate(classroom_times, 1)
    ) if classroom_times else "–ó–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π"

    await callback_query.message.edit_text(
        f"–ö–∞–±–∏–Ω–µ—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name} –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n\n{classrooms_text}",
        reply_markup=await create_teacher_actions_keyboard(teacher_name),
        parse_mode='HTML'
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("rate_"))
async def show_rating_options(callback_query: CallbackQuery):
    teacher_name = callback_query.data.split('_', 1)[1]
    await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}:",
        reply_markup=await create_rating_keyboard(teacher_name)
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("setrate_"))
async def set_teacher_rating(callback_query: CallbackQuery):
    _, teacher_name, rating = callback_query.data.split('_')
    success, msg = database.rate_teacher(callback_query.from_user.id, teacher_name, int(rating))

    if success:
        rating_info = database.get_teacher_rating(teacher_name)
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        average_rating = rating_info['average_rating']
        if average_rating == int(average_rating):
            rating_text = f"{int(average_rating)}/5"
        else:
            rating_text = f"{average_rating:.1f}/5"

        await callback_query.message.edit_text(
            f"–û—Ü–µ–Ω–∫–∞ –¥–ª—è {teacher_name} –ø—Ä–∏–Ω—è—Ç–∞\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {rating_text}\n"
            f"–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {rating_info['total_ratings']}",
            reply_markup=await create_teacher_actions_keyboard(teacher_name)
        )
    else:
        await callback_query.answer(f"–û—à–∏–±–∫–∞: {msg}")


@router.callback_query(lambda c: c.data == "back_to_teachers")
async def back_to_teachers_list(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=await create_teachers_keyboard()
    )
    await callback_query.answer()


async def check_schedule_and_notify(bot):  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä bot
    while True:
        try:
            now = datetime.now()
            tomorrow = (now + timedelta(days=1)).strftime('%Y-%m-%d')

            response = requests.get(f"{SCHEDULE_API_URL}?date={tomorrow}&type=None")
            if not response.ok:
                await asyncio.sleep(120)
                continue

            schedule_data = response.json()
            if not schedule_data.get("result"):
                await asyncio.sleep(120)
                continue

            schedule_hash = hashlib.md5(json.dumps(schedule_data, sort_keys=True).encode()).hexdigest()
            last_hash = database.get_last_schedule_hash(tomorrow)

            if last_hash != schedule_hash:
                database.update_schedule_check(tomorrow, schedule_hash)
                schedule_list = schedule_data.get("obj", {}).get("schedule_list_data", [])

                if schedule_list:
                    schedule_by_group = {}
                    for item in schedule_list:
                        group = item['collective']
                        if group not in schedule_by_group:
                            schedule_by_group[group] = []
                        schedule_by_group[group].append(
                            f"{item['subject']} | {item['teacher']} | –ê—É–¥–∏—Ç–æ—Ä–∏—è: {item['classroom']}"
                        )

                    user_ids = database.get_all_user_ids()
                    for user_id in user_ids:
                        user_group = database.get_user_group(user_id)
                        if user_group and user_group in schedule_by_group:
                            schedule_text = "\n".join(schedule_by_group[user_group])
                            message = f"–ü–æ—è–≤–∏–ª–æ—Å—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow}) –¥–ª—è –≥—Ä—É–ø–ø—ã {user_group}:\n\n{schedule_text}"
                            try:
                                await bot.send_message(user_id, message)  # –¢–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
                            except Exception as e:
                                print(f"Failed to send message to user {user_id}: {e}")

            await asyncio.sleep(120)

        except Exception as e:
            print(f"Error in schedule checker: {e}")
            await asyncio.sleep(120)